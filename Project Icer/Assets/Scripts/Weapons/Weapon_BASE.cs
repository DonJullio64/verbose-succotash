using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using IceEvents.Weapons;

public class Weapon_BASE : MonoBehaviour
{
    public enum WeaponType
    {
        Auto,
        SemiAuto,
        Stream,
        Launcher
    }

    #region VARIABLES

    public AmmoReserve Reserve;

    #endregion VARIABLES

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    #region METHODS_INITIALIZATION

    void Awake()
    {

    }

    #endregion METHODS_INITIALIZATION

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    #region METHODS_UPDATE

    #endregion METHODS_UPDATE

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    #region METHODS_SPECIFICS

    public virtual bool Fire()
    {
        print("Firing Weapon: " + name);
        if (!Reserve.UseAmmoFromFiring())
        {
            Debug.LogError("Weapon Clip Depleted.  Attempting to Reload Weapon: " + name);
            Reload();

            return false;
        }

        EventMGR.STATIC_EventMGR.DispatchEvent(typeof(Ice_SetFiringLock), new Ice_SetFiringLock(Reserve.FireRate));
        return true;
    }

    protected void Reload()
    {
        if (Reserve.IsReserveEmpty() || Reserve.IsClipFull())
        {
            Debug.LogError("Cannot Reload. Either Ammo Reserve is Empty or Clip is Full.");
            return;
        }

        print("Reloading Weapon: " + name);
        StartCoroutine(ReloadWeapon_Coroutine());
    }

    #endregion METHODS_SPECIFICS

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    #region METHODS_EVENTS



    #endregion METHODS_EVENTS

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    #region METHODS_COLLISION



    #endregion METHODS_COLLISION

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    #region METHODS_COROUTINES

    IEnumerator ReloadWeapon_Coroutine()
    {
        float reloadtime = Reserve.ReloadTime;

        WeaponController.STATIC_WeaponController.LockFiring(reloadtime);
        yield return new WaitForSeconds(reloadtime);

        Reserve.FillAmmoClip();
    }

    #endregion METHODS_COROUTINES

    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    #region GIZMOS

    //OnGizmo - private void OnDrawGizmos() { }

    #endregion GIZMOS
}
